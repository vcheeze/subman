/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as AboutRouteImport } from './routes/about'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as UsersRouteRouteImport } from './routes/users.route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users.index'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as PublicSignupRouteImport } from './routes/_public/signup'
import { Route as PublicSigninRouteImport } from './routes/_public/signin'
import { Route as PublicDemoRouteImport } from './routes/_public/demo'
import { Route as AuthedSettingsRouteImport } from './routes/_authed/settings'
import { Route as AuthedAppLandingRouteImport } from './routes/_authed/app-landing'
import { Route as AuthedAppRouteImport } from './routes/_authed/app'
import { Route as AuthedSubsAddRouteImport } from './routes/_authed/subs.add'
import { ServerRoute as ApiPortalServerRouteImport } from './routes/api/portal'
import { ServerRoute as ApiCheckoutServerRouteImport } from './routes/api/checkout'
import { ServerRoute as ApiUsersIdServerRouteImport } from './routes/api/users.$id'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)
const PublicSignupRoute = PublicSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => PublicRoute,
} as any)
const PublicSigninRoute = PublicSigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => PublicRoute,
} as any)
const PublicDemoRoute = PublicDemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => PublicRoute,
} as any)
const AuthedSettingsRoute = AuthedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedAppLandingRoute = AuthedAppLandingRouteImport.update({
  id: '/app-landing',
  path: '/app-landing',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedAppRoute = AuthedAppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedSubsAddRoute = AuthedSubsAddRouteImport.update({
  id: '/subs/add',
  path: '/subs/add',
  getParentRoute: () => AuthedRoute,
} as any)
const ApiPortalServerRoute = ApiPortalServerRouteImport.update({
  id: '/api/portal',
  path: '/api/portal',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCheckoutServerRoute = ApiCheckoutServerRouteImport.update({
  id: '/api/checkout',
  path: '/api/checkout',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersIdServerRoute = ApiUsersIdServerRouteImport.update({
  id: '/api/users/$id',
  path: '/api/users/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/users': typeof UsersRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/app': typeof AuthedAppRoute
  '/app-landing': typeof AuthedAppLandingRoute
  '/settings': typeof AuthedSettingsRoute
  '/demo': typeof PublicDemoRoute
  '/signin': typeof PublicSigninRoute
  '/signup': typeof PublicSignupRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/': typeof UsersIndexRoute
  '/subs/add': typeof AuthedSubsAddRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/app': typeof AuthedAppRoute
  '/app-landing': typeof AuthedAppLandingRoute
  '/settings': typeof AuthedSettingsRoute
  '/demo': typeof PublicDemoRoute
  '/signin': typeof PublicSigninRoute
  '/signup': typeof PublicSignupRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users': typeof UsersIndexRoute
  '/subs/add': typeof AuthedSubsAddRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/users': typeof UsersRouteRouteWithChildren
  '/_authed': typeof AuthedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/_authed/app': typeof AuthedAppRoute
  '/_authed/app-landing': typeof AuthedAppLandingRoute
  '/_authed/settings': typeof AuthedSettingsRoute
  '/_public/demo': typeof PublicDemoRoute
  '/_public/signin': typeof PublicSigninRoute
  '/_public/signup': typeof PublicSignupRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/': typeof UsersIndexRoute
  '/_authed/subs/add': typeof AuthedSubsAddRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/users'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/app'
    | '/app-landing'
    | '/settings'
    | '/demo'
    | '/signin'
    | '/signup'
    | '/users/$userId'
    | '/users/'
    | '/subs/add'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/app'
    | '/app-landing'
    | '/settings'
    | '/demo'
    | '/signin'
    | '/signup'
    | '/users/$userId'
    | '/users'
    | '/subs/add'
  id:
    | '__root__'
    | '/'
    | '/users'
    | '/_authed'
    | '/_public'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/_authed/app'
    | '/_authed/app-landing'
    | '/_authed/settings'
    | '/_public/demo'
    | '/_public/signin'
    | '/_public/signup'
    | '/users/$userId'
    | '/users/'
    | '/_authed/subs/add'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  AuthedRoute: typeof AuthedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  AboutRoute: typeof AboutRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
}
export interface FileServerRoutesByFullPath {
  '/api/checkout': typeof ApiCheckoutServerRoute
  '/api/portal': typeof ApiPortalServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/checkout': typeof ApiCheckoutServerRoute
  '/api/portal': typeof ApiPortalServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/checkout': typeof ApiCheckoutServerRoute
  '/api/portal': typeof ApiPortalServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/checkout' | '/api/portal' | '/api/auth/$' | '/api/users/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/checkout' | '/api/portal' | '/api/auth/$' | '/api/users/$id'
  id:
    | '__root__'
    | '/api/checkout'
    | '/api/portal'
    | '/api/auth/$'
    | '/api/users/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCheckoutServerRoute: typeof ApiCheckoutServerRoute
  ApiPortalServerRoute: typeof ApiPortalServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiUsersIdServerRoute: typeof ApiUsersIdServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/_public/signup': {
      id: '/_public/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof PublicSignupRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/signin': {
      id: '/_public/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof PublicSigninRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/demo': {
      id: '/_public/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof PublicDemoRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_authed/settings': {
      id: '/_authed/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/app-landing': {
      id: '/_authed/app-landing'
      path: '/app-landing'
      fullPath: '/app-landing'
      preLoaderRoute: typeof AuthedAppLandingRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/app': {
      id: '/_authed/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AuthedAppRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/subs/add': {
      id: '/_authed/subs/add'
      path: '/subs/add'
      fullPath: '/subs/add'
      preLoaderRoute: typeof AuthedSubsAddRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/portal': {
      id: '/api/portal'
      path: '/api/portal'
      fullPath: '/api/portal'
      preLoaderRoute: typeof ApiPortalServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/checkout': {
      id: '/api/checkout'
      path: '/api/checkout'
      fullPath: '/api/checkout'
      preLoaderRoute: typeof ApiCheckoutServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$id': {
      id: '/api/users/$id'
      path: '/api/users/$id'
      fullPath: '/api/users/$id'
      preLoaderRoute: typeof ApiUsersIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

interface AuthedRouteChildren {
  AuthedAppRoute: typeof AuthedAppRoute
  AuthedAppLandingRoute: typeof AuthedAppLandingRoute
  AuthedSettingsRoute: typeof AuthedSettingsRoute
  AuthedSubsAddRoute: typeof AuthedSubsAddRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedAppRoute: AuthedAppRoute,
  AuthedAppLandingRoute: AuthedAppLandingRoute,
  AuthedSettingsRoute: AuthedSettingsRoute,
  AuthedSubsAddRoute: AuthedSubsAddRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface PublicRouteChildren {
  PublicDemoRoute: typeof PublicDemoRoute
  PublicSigninRoute: typeof PublicSigninRoute
  PublicSignupRoute: typeof PublicSignupRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicDemoRoute: PublicDemoRoute,
  PublicSigninRoute: PublicSigninRoute,
  PublicSignupRoute: PublicSignupRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  AuthedRoute: AuthedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  AboutRoute: AboutRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCheckoutServerRoute: ApiCheckoutServerRoute,
  ApiPortalServerRoute: ApiPortalServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiUsersIdServerRoute: ApiUsersIdServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
